                       PROBLEMS
Chapter 1...

1. Counting duplicate characters: Write a program that counts duplicate
characters from a given string.

2. Finding the first non-repeated character: Write a program that returns the
first non-repeated character from a given string.

3. Reversing letters and words: Write a program that reverses the letters of
each word and a program that reverses the letters of each word and the
words themselves.

4. Checking whether a string contains only digits: Write a program that
checks whether the given string contains only digits.

5. Counting vowels and consonants: Write a program that counts the
number of vowels and consonants in a given string. Do this for the English
language, which has five vowels (a, e, i, o, and u).

6. Counting occurrences of a certain character: Write a program that counts
the occurrences of a certain character in a given string.

7. Converting String into int, long, float, or double: Write a program
that converts the given String object (representing a number) into int,
long, float, or double.

8. Removing white spaces from a string: Write a program that removes all
white spaces from the given string.

9. Joining multiple strings with a delimiter: Write a program that joins the
given strings by the given delimiter.

10. Generating all permutations: Write a program that generates all of the
permutations of a given string.

11. Checking whether a string is a palindrome: Write a program that
determines whether the given string is a palindrome or not.

12. Removing duplicate characters: Write a program that removes the
duplicate characters from the given string.

13. Removing given characters: Write a program that removes the given
character from the given string.

14. Finding the character with the most appearances: Write a program that
finds the character with the most appearances in the given string.

15. Sorting an array of strings by length: Write a program that sorts by the
length of the given array of strings.

16. Checking that a string contains a substring: Write a program that checks
whether the given string contains the given substring.

17. Counting substring occurrences a string: Write a program that counts the
occurrences of a given string in another given string.

18. Checking whether two strings are anagrams: Write a program that checks
whether two strings are anagrams. Consider that an anagram of a string is
a permutation of this string by ignoring capitalization and white spaces.

19. Declaring multiline strings (text blocks): Write a program that declares
multiline strings or text blocks.

20. Concatenating the same string n times: Write a program that concatenates
the same string a given number of times.

21. Removing leading and trailing spaces: Write a program that removes the
leading and trailing spaces of the given string.

22. Finding the longest common prefix: Write a program that finds the longest
common prefix of given strings.

23. Applying indentation: Write several snippets of code to apply indentation
to the given text.

24. Transforming strings: Write several snippets of code to transform a string
into another string.



Chapter 2...

1. Checking null references in functional style and imperative code: Write
a program that performs the null checks on the given references in a
functional style and imperative code.

2. Checking null references and throwing a customized
NullPointerException error: Write a program that performs the null
checks on the given references and throws NullPointerException with
custom messages.

3. Checking null references and throwing the specified exception
(example, IllegalArgumentException): Write a program that performs
the null checks on the given references and throws the specified exception.

4. Checking null references and returning non-null default
references: Write a program that performs the null checks on the given
reference, and if it is non-null, then return it; otherwise, return a non-null
default reference.

5. Checking the index in the range from 0 to length: Write a program that
checks whether the given index is between 0 (inclusive) and the given
length (exclusive). If the given index is out of the [0, given length] range,
then throw IndexOutOfBoundsException.

6. Checking the subrange in the range from 0 to length: Write a program
that checks whether the given subrange [given start, given end] is within the
bounds of the range from [0, given length]. If the given subrange is not in
the [0, given length] range, then throw IndexOutOfBoundsException.

7. equals() and hashCode(): Explain and exemplify how equals() and
hashCode() methods work in Java.

8 Immutable objects in a nutshell: Explain and exemplify what is an
immutable object in Java.

9. Immutable string: Explain why the String class is immutable.

10. Writing an immutable class: Write a program that represents an
immutable class.

11. Passing/returning mutable objects to/from an immutable class: Write a
program that passes and returns a mutable object to/from an immutable
class.

12. Writing an immutable class via the Builder pattern: Write a program that
represents an implementation of the Builder pattern in an immutable class.

13. Avoiding bad data in immutable objects: Write a program that prevents
bad data in immutable objects.

14. Cloning objects: Write a program that exemplifies shallow and deep
cloning techniques.

15. Overriding toString(): Explain and exemplify practices for overriding
toString().

16. switch expressions: Provide a brief overview of the switch expressions in
JDK 12.

17. Multiple case labels: Write a snippet of code for exemplifying the JDK 12
switch with multiple case labels.

18. Statement blocks: Write a snippet of code for exemplifying the JDK 12
switch with case labels that point to a curly-braced block